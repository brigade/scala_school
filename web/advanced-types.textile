---
prev: type-basics.textile
next: maven.textile
title: Advanced types
layout: post
---

This lesson covers:

* "Implicit Conversions":#implicit
* "View bounds":#viewbounds ("type classes")
* "Other Type Bounds":#otherbounds
* "F-bounded polymorphism / recursive types":#fbounded
* "Structural types":#structural
* "Abstract types members":#abstractmem
* "Type erasures & type tags":#typetags
* "Case study: Finagle":#finagle

h2(#implicit). Implicit Conversions

*Implicit functions* allow automatic conversion. More precisely, they allow on-demand function application when this can help satisfy type inference. e.g.:

<pre>
scala> implicit def strToInt(x: String) = x.toInt
strToInt: (x: String)Int

scala> "123"
res0: java.lang.String = 123

scala> val y: Int = "123"
y: Int = 123

scala> math.max("123", 111)
res1: Int = 123
</pre>


h2(#viewbounds). View bounds ("type classes")

View bounds, like type bounds demand such a function exists for the given type.  You specify a view bound with <code><%</code> e.g.,

<pre>
scala> class Container[A <% Int] { def addIt(x: A) = 123 + x }
defined class Container
</pre>

This says that *A* has to be "viewable" as *Int*.  Let's try it.

<pre>
scala> (new Container[String]).addIt("123")
res11: Int = 246

scala> (new Container[Int]).addIt(123)
res12: Int = 246

scala> (new Container[Float]).addIt(123.2F)
<console>:8: error: could not find implicit value for evidence parameter of type (Float) => Int
       (new Container[Float]).addIt(123.2)
               ^
</pre>

@<%@ is just syntactic sugar. You may see typeclasses defined using implicits in our code and elsewhere:

<pre>
scala> class Container[A](a: A)(implicit ev: A => Int) { def addIt(x: A) = 123 + x }
</pre>

h2(#otherbounds). Other type bounds

Methods can enforce more complex type bounds via implicit parameters. For example, <code>List</code> supports <code>sum</code> on numeric contents but not on others. Alas, Scala's numeric types don't all share a superclass, so we can't just say <code>T <: Number</code>. Instead, to make this work, Scala's math library <a href="http://www.azavea.com/blogs/labs/2011/06/scalas-numeric-type-class-pt-1/">defines an implicit <code>Numeric[T]</code> for the appropriate types T</a>.  Then in <code>List</code>'s definition uses it:

<pre>
sum[B >: A](implicit num: Numeric[B]): B
</pre>

If you invoke <code>List(1,2).sum()</code>, you don't need to pass a _num_ parameter; it's set implicitly. But if you invoke <code>List("whoop").sum()</code>, it complains that it couldn't set <code>num</code>.

h3. Generic programming with views

In the Scala standard library, views are primarily used to implement generic functions over collections.  For example, the "min" function (on *Seq[]*), uses this technique:

<pre>
def min[B >: A](implicit cmp: Ordering[B]): A = {
  if (isEmpty)
    throw new UnsupportedOperationException("empty.min")

  reduceLeft((x, y) => if (cmp.lteq(x, y)) x else y)
}
</pre>

The main advantages of this are:

* Items in the collections aren't required to implement *Ordered*, but *Ordered* uses are still statically type checked.
* You can define your own orderings without any additional library support:

<pre>
scala> List(1,2,3,4).min
res0: Int = 1

scala> List(1,2,3,4).min(new Ordering[Int] { def compare(a: Int, b: Int) = b compare a })
res3: Int = 4
</pre>

As a sidenote, there are views in the standard library that translates *Ordered* into *Ordering* (and vice versa).

<pre>
trait LowPriorityOrderingImplicits {
  implicit def ordered[A <: Ordered[A]]: Ordering[A] = new Ordering[A] {
    def compare(x: A, y: A) = x.compare(y)
  }
}
</pre>

h4. Context bounds & implicitly[]

Scala 2.8 introduced a shorthand for threading through & accessing implicit arguments.

<pre>
scala> def foo[A](implicit x: Ordered[A]) {}
foo: [A](implicit x: Ordered[A])Unit

scala> def foo[A : Ordered] {}
foo: [A](implicit evidence$1: Ordered[A])Unit
</pre>

Implicit values may be accessed via *implicitly*

<pre>
scala> implicitly[Ordering[Int]]
res37: Ordering[Int] = scala.math.Ordering$Int$@3a9291cf
</pre>

Combined, these often result in less code, especially when threading through views.

h2(#fbounded). F-bounded polymorphism

Often it's necessary to access a concrete subclass in a (generic) trait. For example, imagine you had some trait that is generic, but can be compared to a particular subclass of that trait.

<pre>
trait Container extends Ordered[Container]
</pre>

However, this now necessitates the subclass to implement the compare method

<pre>
def compare(that: Container): Int
</pre>

And so we cannot access the concrete subtype, e.g.:

<pre>
class MyContainer extends Container {
  def compare(that: MyContainer): Int
}
</pre>

fails to compile, since we are specifying Ordered for *Container*, not the particular subtype.

Then an alternative solution would be parameterize Container so that we can access the subtype in the subclass.

<pre>
trait Container[A] extends Ordered[A]
</pre>

The subclass could now do the following:

<pre>
class MyContainer extends Container[MyContainer] {
  def compare(that: MyContainer): Int
}
</pre>

But the problem is that the type A is not bounded by anything, and you could potentially do something like this:

<pre>
class MyContainer extends Container[String] {
  def compare(that: String): Int
}
</pre>

To reconcile this, we instead use F-bounded polymorphism.

<pre>
trait Container[A <: Container[A]] extends Ordered[A]
</pre>

Strange type!  But note now how Ordered is parameterized on *A*, which itself is *Container[A]*

So, now

<pre>
class MyContainer extends Container[MyContainer] {
  def compare(that: MyContainer) = 0
}
</pre>

They are now ordered:

<pre>
scala> List(new MyContainer, new MyContainer, new MyContainer)
res3: List[MyContainer] = List(MyContainer@30f02a6d, MyContainer@67717334, MyContainer@49428ffa)

scala> List(new MyContainer, new MyContainer, new MyContainer).min
res4: MyContainer = MyContainer@33dfeb30
</pre>

Given that they are all subtypes of *Container[_]*, we can define another subclass & create a mixed list of *Container[_]*:

<pre>
scala> class YourContainer extends Container[YourContainer] { def compare(that: YourContainer) = 0 }
defined class YourContainer

scala> List(new MyContainer, new MyContainer, new MyContainer, new YourContainer)
res2: List[Container[_ >: YourContainer with MyContainer <: Container[_ >: YourContainer with MyContainer <: ScalaObject]]]
  = List(MyContainer@3be5d207, MyContainer@6d3fe849, MyContainer@7eab48a7, YourContainer@1f2f0ce9)
</pre>

Note how the resulting type is now lower-bound by *YourContainer with MyContainer*. This is the work of the type inferencer. Interestingly- this type doesn't even need to make sense, it only provides a logical greatest lower bound for the unified type of the list. What happens if we try to use *Ordered* now?

<pre>
(new MyContainer, new MyContainer, new MyContainer, new YourContainer).min
<console>:9: error: could not find implicit value for parameter cmp:
  Ordering[Container[_ >: YourContainer with MyContainer <: Container[_ >: YourContainer with MyContainer <: ScalaObject]]]
</pre>

No *Ordered[]* exists for the unified type. Too bad.

h2(#structural). Structural types

Scala has support for *structural types* -- type requirements are expressed by interface _structure_ instead of a concrete type.

<pre>
scala> def foo(x: { def get: Int }) = 123 + x.get
foo: (x: AnyRef{def get: Int})Int

scala> foo(new { def get = 10 })
res0: Int = 133
</pre>

We and most of the scala community avoid structural typing because of
it has serious performance implications.

h2(#abstractmem). Abstract type members

In a trait, you can leave type members abstract.

<pre>
scala> trait Foo { type A; val x: A; def getX: A = x }
defined trait Foo

scala> (new Foo { type A = Int; val x = 123 }).getX
res3: Int = 123

scala> (new Foo { type A = String; val x = "hey" }).getX
res4: java.lang.String = hey
</pre>

This is often a useful trick when doing dependency injection, etc.

h2(#typetags). Type erasures & type tags

As we know, type information is lost at compile time due to _erasure_. Scala features *TypeTags*, allowing us to selectively recover type information. TypeTags are provided as an implicit value, generated by the compiler as needed. Side note: you'll probably see *ClassTags* more often, these are actually a special case of a TypeTag with less information.

<pre>
scala> import scala.reflect.ClassTag
scala> class MakeFoo[A](implicit ct: ClassTag[A]) { def make: A = ct.runtimeClass.newInstance.asInstanceOf[A] }

scala> (new MakeFoo[String]).make
res10: String = ""
</pre>

h2(#finagle). Case study: Finagle

See: "https://github.com/twitter/finagle":https://github.com/twitter/finagle

<pre>
trait Service[-Req, +Rep] extends (Req => Future[Rep])

trait Filter[-ReqIn, +RepOut, +ReqOut, -RepIn]
  extends ((ReqIn, Service[ReqOut, RepIn]) => Future[RepOut])
{
  def andThen[Req2, Rep2](next: Filter[ReqOut, RepIn, Req2, Rep2]) =
    new Filter[ReqIn, RepOut, Req2, Rep2] {
      def apply(request: ReqIn, service: Service[Req2, Rep2]) = {
        Filter.this.apply(request, new Service[ReqOut, RepIn] {
          def apply(request: ReqOut): Future[RepIn] = next(request, service)
          override def release() = service.release()
          override def isAvailable = service.isAvailable
        })
      }
    }

  def andThen(service: Service[ReqOut, RepIn]) = new Service[ReqIn, RepOut] {
    private[this] val refcounted = new RefcountedService(service)

    def apply(request: ReqIn) = Filter.this.apply(request, refcounted)
    override def release() = refcounted.release()
    override def isAvailable = refcounted.isAvailable
  }
}
</pre>

A service may authenticate requests with a filter.

<pre>
trait RequestWithCredentials extends Request {
  def credentials: Credentials
}

class CredentialsFilter(credentialsParser: CredentialsParser)
  extends Filter[Request, Response, RequestWithCredentials, Response]
{
  def apply(request: Request, service: Service[RequestWithCredentials, Response]): Future[Response] = {
    val requestWithCredentials = new RequestWrapper with RequestWithCredentials {
      val underlying = request
      val credentials = credentialsParser(request) getOrElse NullCredentials
    }

    service(requestWithCredentials)
  }
}
</pre>

Note how the underlying service requires an authenticated request, and that this is statically verified. Filters can thus be thought of as service transformers.

Many filters can be composed together:

<pre>
val upFilter =
  logTransaction     andThen
  handleExceptions   andThen
  extractCredentials andThen
  homeUser           andThen
  authenticate       andThen
  route
</pre>

Type safely!
