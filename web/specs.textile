---
prev: coll2.textile
next: concurrency.textile
title: Testing with ScalaTest
layout: post
---

This lesson covers testing with <a href="http://www.scalatest.org/">ScalaTest</a>, a flexible Scala testing framework. There are many ways of using ScalaTest, as it doesn't impose a testing philosophy on the user, so we will only talk about how we use it at Brigade.

* "WordSpec":#example
* "Setup and TearDown":#setup
* "Matchers":#matchers
* "Mocks":#mocks
* "Spies":#spies
* "run with mvn":#mvn


h2(#example). WordSpec

We chose to use WordSpec because of its similarity to RSpec. We use the Matchers trait to express assertions in a more readable way. Let's just jump in.

<pre>
import org.scalatest.{Matchers, WordSpec}

class ArithmeticSpec extends WordSpec with Matchers {
  "Arithmetic" should {
    "add two numbers" in {
      1 + 1 should equal(2)
    }
    "add three numbers" in {
      1 + 1 + 1 should equal(3)
    }
  }
}
</pre>

*Arithmetic* is the *System Under Specification*

*add* is a context.

*add two numbers* and *add three numbers* are examples.

@should equal@ indicates an *expectation*

@1 should equal(1)@ is a common placeholder *expectation* before you start writing real tests.  All examples should have at least one expectation.

h3. Duplication

Notice how two tests both have @add@ in their name?  We can get rid of that by *nesting* expectations.

<pre>
import org.scalatest.{Matchers, WordSpec}

class ArithmeticSpec extends WordSpec with Matchers {
  "Arithmetic" should {
    "add" in {
      "two numbers" in {
        1 + 1 should equal(2)
      }
      "three numbers" in {
        1 + 1 + 1 should equal(3)
      }
    }
  }
}
</pre>

h2(#setup). Setup, Teardown

h3. BeforeAndAfterAll

The BeforeAndAfterAll trait can be used to perform side effects before and/or after all tests run.

<pre>
class ASpec extends WordSpec with Matchers with BeforeAndAfterAll {
  override def beforeAll(): Unit = {
    setup() // setup things before all tests
  }

  override def afterAll(): Unit = {
    tearDown() // cleanup after all tests
  }

  "my code" should {
    "do stuff" in {...}
  }
}
</pre>

h3. BeforeAndAfterEach

Similarly, BeforeAndAfterEach can be used to perform side effects before and/or after each test.

<pre>
class BSpec extends WordSpec with Matchers with BeforeAndAfterAll {
  val buffer = mutable.ArrayBuffer[Int]()

  override def before(): Unit = {
    buffer += 1 // add an element to start
  }

  override def afterAll(): Unit = {
    buffer.clear()
  }

  "my code" should {
    "do stuff with buffer" in {...}
  }
}
</pre>

h2(#matchers). Matchers

You have data, you want to make sure it's right. Let's tour commonly used matchers.

h3.

We've seen several examples of <code>should equal</code> already.

<pre>
1 should equal(1)

"a" should equal("a")
</pre>

Reference equality, value equality.

h3. elements in a Sequence

<pre>
val numbers = Seq(1, 2, 3)

numbers should contain(1)
numbers should not contain(4)

numbers should contain allOf(1, 2, 3)
numbers should contain theSameElementsAs Seq(1, 2, 3)
numbers should contain inOrderOnly(1, 2, 3)
numbers should contain theSameElementsInOrderAs Seq(1, 2, 3)
</pre>


h3. Items in a Map

<pre>
map should contain key(k)
map should not contain key(k)

map should contain value(v)
map should not contain value(v)
</pre>

h3. Numbers

<pre>
a should be > b
a should be >= b

a should be < b
a should be <= b

a should equal(b +- delta)
</pre>


h3. Options

<pre>
a shouldEqual None

a shouldBe defined

a should equal(Some(value))
</pre>

h3. Exceptions

<pre>
a [IndexOutOfBoundsException] should be thrownBy s.charAt(-1)
</pre>

This is shorter than a try catch with a fail in the body.

You can also expect a specific message

<pre>
val thrown = the [IndexOutOfBoundsException] thrownBy s.charAt(-1)
thrown.getMessage should equal("message")
</pre>

You can also match on the exception:

<pre>
the [IndexOutOfBoundsException] thrownBy {
  s.charAt(-1)
} should have message "String index out of range: -1"
</pre>

You can also state that no exception should be thrown by some code, like this:

<pre>
noException should be thrownBy s.charAt(1)
</pre>

h3. Write your own Matchers

<pre>
import org.specs.matcher.Matcher
</pre>

h4. As a val

<pre>
"A matcher" should {
  "be created as a val" in {
    val beEven = new Matcher[Int] {
      def apply(n: Int) = {
        MatchResult(n % 2 == 0, "%d is odd".format(n), "%d is even".format(n))
      }
    }
    2 should beEven
  }
}
</pre>

The contract is to return a tuple containing whether the expectation is true, and a message for when it is and isn't true.

h4. As a case class

<pre>
case class BeEvenMatcher(b: Int) extends Matcher[Int]() {
  def apply(n: Int) = MatchResult(n % 2 == 0, "%d is odd".format(n), "%d is even".format(n))
}
</pre>

Using a case class makes it more shareable. The Scalatest docs have suggestions on how to organize custom matchers in a trait <a href="http://www.scalatest.org/user_guide/using_matchers#usingCustomMatchers">here</a>.

h2(#mocks). Mocks

<pre>
import org.scalatest.{Matchers, WordSpec}
import org.scalatest.mock.MockitoSugar
import org.mockito.Mockito._

abstract class Foo[T] {
  def get(i: Int): T
}

class MockExampleSpec extends WordSpec with Matchers with MockitoSugar {
  "a mock" should {
    "stub and verify" in {
      val m = mock[Foo[String]]

      when(m.get(0)) thenReturn "one"

      m.get(0)

      verify(m).get(0)
      verify(m, never()).get(1)
    }
  }
}
</pre>

*See Also* "Using Mockito":http://mockito.github.io/mockito/docs/current/org/mockito/Mockito.html

h2(#spies). Spies

Spies can also be used in order to do some "partial mocking" of real objects:

<pre>
val list = Seq[String].empty
val spiedList = spy(list)

// methods can be stubbed on a spy
spiedList.size returns 100

// other methods can also be used
spiedList.add("one")
spiedList.add("two")

// and verification can happen on a spy
there was one(spiedList).add("one")
</pre>

However, working with spies can be tricky:

<pre>
// if the list is empty, this will throws an IndexOutOfBoundsException
spiedList.get(0) returns "one"
</pre>

@doReturn@ must be used in that case:

<pre>
doReturn("one").when(spiedList).get(0)
</pre>


h2(#mvn). Run individual specs with mvn


<pre>
mvn test -DwildcardSuites=brigade.foo.bar.SomeSpec
</pre>

Will run just that spec.
