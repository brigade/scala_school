---
prev: advanced-types.textile
next: coll2.textile
title: Maven
layout: post
---

This lesson covers Maven! Specific topics include:
* creating an Maven scala project
* basic commands

h2. About Maven

Maven is one of the most popular Java build tools. Unlike SBT, Ant, and
others, it stresses a declarative approach and convention over configuration.


h2. Why Maven?

* Great dependency management
* Out-of-the box integrations (Jenkins, IDEs, Nexus, etc...)
* Lots of plugins
* Relatively simple

h2. Why not SBT?

SBT (simple/scala build tool) is more popular than Maven in the Scala community,
and has been improving rapidly in the past few years. We may switch to it eventually,
though Maven has been working perfectly well for us.

Benefits of Maven over SBT:
* Easier to learn
* Declarative
* Very mature ecosystem
* Does fewer things, but does them well

Benefits of SBT over Maven
* No XML
* Super easy to extend with custom plugins (some would say too easy)
* Much less boilerplate

h2. Project Layout

* @pom.xml@ - your Maven project definition (pom stands for "project object model")
* @src/main@ - your app code goes here, in a subdirectory indicating the
code's language (e.g. @src/main/scala@, @src/main/java@)
* @src/main/resources@ - static files you want added to your jar
  (e.g. logging config)
* @src/test@ - like @src/main@, but for tests
* @target@ - the destination for generated stuff (e.g. generated thrift
  code, class files, jars)

h2. Getting Started

* Make sure maven is installed (@brew install maven@)
* I created a basic scala maven project "here":https://gist.github.com/matteobanerjee/6aafa5d75938c1cfc499 
(this is verbose because scala support is a plugin)
* Your IDE can also create a Maven project for you

<pre>
[local ~/]$ mkdir -p projects/sample
[local ~/]$ cd projects/sample
[local ~/projects/sample]$ wget https://gist.githubusercontent.com/matteobanerjee/6aafa5d75938c1cfc499/raw/15b127fd120f9680495b5509f74c5204e1b7444a/pom.xml
[local ~/projects/sample]$ mvn compile
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building sample 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ sample ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /Users/matteobanerjee/projects/sample/src/main/resources
[INFO]
[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ sample ---
[INFO] No sources to compile
[INFO]
[INFO] --- scala-maven-plugin:3.2.0:compile (default) @ sample ---
[INFO] No sources to compile
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.513 s
[INFO] Finished at: 2015-11-13T17:55:14-08:00
[INFO] Final Memory: 11M/245M
</pre>

h2. Adding Some Code

We'll be creating a simple JSON parser for simple tweets.  Add the following code to
@src/main/scala/sample/SimpleParser.scala@

<pre>
package sample

case class SimpleParsed(id: Long, text: String)

class SimpleParser {

  val tweetRegex = "\"id\":(.*),\"text\":\"(.*)\"".r

  def parse(str: String) = {
    tweetRegex.findFirstMatchIn(str) match {
      case Some(m) => {
        val id = str.substring(m.start(1), m.end(1)).toInt
        val text = str.substring(m.start(2), m.end(2))
        Some(SimpleParsed(id, text))
      }
      case _ => None
    }
  }
}
</pre>

This is ugly and buggy, but should compile.

h2. Compiling and Testing in the Console

Compile your code:
<pre>[local ~/projects/sample]$ mvn compile</pre>

Maven allows you to start a Scala REPL with all your project
dependencies loaded. It compiles your project source before launching
the console, providing us a quick way to bench test our parser.

<pre>
[local ~/projects/sample]$ mvn scala:console
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building sample 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- scala-maven-plugin:3.2.0:console (default-cli) @ sample ---
[WARNING] scala-maven-plugin cannot fork scala console!!  Running in process
Welcome to Scala version 2.11.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_67).
Type in expressions to have them evaluated.
Type :help for more information.

scala>
</pre>

Our code has compiled, and we're provide the typical Scala prompt.  We'll create a new parser, an exemplar tweet, and ensure it "works"

<pre>
scala> import sample._
import sample._

scala> val tweet = """{"id":1,"text":"foo"}"""
tweet: String = {"id":1,"text":"foo"}

scala> val parser = new SimpleParser
parser: sample.SimpleParser = sample.SimpleParser@45d41c7f

scala> parser.parse(tweet)
res0: Option[sample.SimpleParsed] = Some(SimpleParsed(1,foo))

scala>
</pre>

h2. Adding Tests

The Maven build you pulled down already has our testing library,
ScalaTest, declared as a dependency. So let's add a spec in
src/test/scala/sample/SimpleParserSpec.scala

<pre>
package sample

import org.scalatest._

class SimpleParserSpec extends WordSpec with Matchers {

  "SimpleParser" should {
    val parser = new SimpleParser()

    "work with basic tweet" in {
      val tweet = """{"id":1,"text":"foo"}"""
      parser.parse(tweet) match {
        case Some(parsed) =>
          parsed.text should equal("foo")
          parsed.id should equal(1)
        case _ => fail("didn't parse tweet")
      }
    }
  }
}
</pre>

Run the test at the command line. The flag @-q@ suppresses INFO output:

<pre>
[local ~/projects/sample]$ mvn test -q
Discovery starting.
Discovery completed in 351 milliseconds.
Run starting. Expected test count is: 1
SimpleParserSpec:
SimpleParser
- should work with basic tweet
Run completed in 543 milliseconds.
Total number of tests run: 1
Suites: completed 2, aborted 0
Tests: succeeded 1, failed 0, canceled 0, ignored 0, pending 0
All tests passed.
</pre>

Our test works!  Now we can add more.

First, let's start a continuous test loop:

<pre>
[local ~/projects/sample]$ mvn -Dcctest.goals=scalatest:test scala:cctest
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building sample 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- scala-maven-plugin:3.2.0:cctest (default-cli) @ sample ---
[INFO] wait for files to compile...
[INFO] /Users/matteobanerjee/projects/sample/src/test/scala:-1: info: compiling
[INFO] Using zinc server for incremental compilation
[info] Compile success at Nov 13, 2015 6:29:39 PM [0.057s]
[INFO] Now running all the unit tests. Use -Dtest=FooTest to run a single test by name
[INFO] Scanning for projects...
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building sample 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-surefire-plugin:2.7:test (default-cli) @ sample ---
[INFO] Tests are skipped.
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.136 s
[INFO] Finished at: 2015-11-13T18:29:43-08:00
[INFO] Final Memory: 8M/245M
[INFO] ------------------------------------------------------------------------
[INFO] wait for files to compile...
</pre>

Now let's add the following test cases

<pre>
    "reject a non-JSON tweet" in {
      val tweet = """"id":1,"text":"foo""""
      parser.parse(tweet) should equal(None)
    }

    "ignore nested content" in {
      val tweet = """{"id":1,"text":"foo","nested":{"id":2}}"""
      parser.parse(tweet) match {
        case Some(parsed) => {
          parsed.text should equal("foo")
          parsed.id should equal(1)
        }
        case _ => fail("didn't parse tweet")
      }
    }

    "fail on partial content" in {
      val tweet = """{"id":1}"""
      parser.parse(tweet) should equal(None)
    }
</pre>

After we save our file, Maven detects our changes, runs tests, and informs us our parser is lame

<pre>
Discovery starting.
Discovery completed in 424 milliseconds.
Run starting. Expected test count is: 4
SimpleParserSpec:
SimpleParser
- should work with basic tweet
- should reject a non-JSON tweet *** FAILED ***
  Some(SimpleParsed(1,foo)) did not equal None (SimpleParserSpec.scala:22)
  - should ignore nested content *** FAILED ***
    "foo[","nested":{"id]" did not equal "foo[]" (SimpleParserSpec.scala:29)
    - should fail on partial content
Run completed in 716 milliseconds.
Total number of tests run: 4
Suites: completed 2, aborted 0
Tests: succeeded 2, failed 2, canceled 0, ignored 0, pending 0
*** 2 TESTS FAILED ***
</pre>


h2. Adding Dependencies

Our simple parser works for this very small set of inputs, but we want to add tests and break it.  The first step is adding the specs test library and a real JSON parser to our project.

Add the following dependency to your @pom.xml@ file under the @<dependencies>@ section.

<pre>
<dependency>
  <groupId>org.codehaus.jackson</groupId>
  <artifactId>jackson-core-asl</artifactId>
  <version>1.6.1</version>
</dependency>
</pre>


So let's rework our JSON parser to be real

<pre>
package sample

import org.codehaus.jackson._
import org.codehaus.jackson.JsonToken._

case class SimpleParsed(id: Long, text: String)

class SimpleParser {

  val parserFactory = new JsonFactory()

  def parse(str: String) = {
    val parser = parserFactory.createJsonParser(str)
    if (parser.nextToken() == START_OBJECT) {
      var token = parser.nextToken()
      var textOpt:Option[String] = None
      var idOpt:Option[Long] = None
      while(token != null) {
        if (token == FIELD_NAME) {
          parser.getCurrentName() match {
            case "text" => {
              parser.nextToken()
              textOpt = Some(parser.getText())
            }
            case "id" => {
              parser.nextToken()
              idOpt = Some(parser.getLongValue())
            }
            case _ => // noop
          }
        }
        token = parser.nextToken()
      }
      if (textOpt.isDefined && idOpt.isDefined) {
        Some(SimpleParsed(idOpt.get, textOpt.get))
      } else {
        None
      }
    } else {
      None
    }
  }
}
</pre>

This is a simple Jackson parser.  When we save, Maven recompiles our code and reruns our tests.  Getting better!

<pre>
Discovery starting.
Discovery completed in 499 milliseconds.
Run starting. Expected test count is: 4
SimpleParserSpec:
SimpleParser
- should work with basic tweet
- should reject a non-JSON tweet
- should ignore nested content *** FAILED ***
  2 did not equal 1 (SimpleParserSpec.scala:30)
- should fail on partial content
Run completed in 790 milliseconds.
Total number of tests run: 4
Suites: completed 2, aborted 0
Tests: succeeded 3, failed 1, canceled 0, ignored 0, pending 0
*** 1 TEST FAILED ***
</pre>

Uh oh.  We need to check for nested objects.  Let's add some ugly
guards to our token reading loop.

<pre>
  def parse(str: String) = {
    val parser = parserFactory.createJsonParser(str)
    var nested = 0
    if (parser.nextToken() == START_OBJECT) {
      var token = parser.nextToken()
      var textOpt:Option[String] = None
      var idOpt:Option[Long] = None
      while(token != null) {
        if (token == FIELD_NAME && nested == 0) {
          parser.getCurrentName() match {
            case "text" => {
              parser.nextToken()
              textOpt = Some(parser.getText())
            }
            case "id" => {
              parser.nextToken()
              idOpt = Some(parser.getLongValue())
            }
            case _ => // noop
          }
        } else if (token == START_OBJECT) {
          nested += 1
        } else if (token == END_OBJECT) {
          nested -= 1
        }
        token = parser.nextToken()
      }
      if (textOpt.isDefined && idOpt.isDefined) {
        Some(SimpleParsed(idOpt.get, textOpt.get))
      } else {
        None
      }
    } else {
      None
    }
  }
</pre>

And... it works!

h2. Packaging and Publishing

At this point we can run the package command to generate a jar (java archive) file:
<pre>mvn package</pre>

This only packages the code we wrote in our project. However, when we ship a code we usually want
to package our dependencies along with it too.

The first step is include the Maven Shade plugin.  Plugins are a way to introduce dependencies to your build, rather than your project.
Add the following under the @plugins@ section of your @pom.xml@ file:


<pre>
    <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>2.3</version>
        <executions>
            <execution>
                <phase>package</phase>
                <goals>
                    <goal>shade</goal>
                </goals>
            </execution>
        </executions>
    </plugin>
</pre>

Now run @mvn package@. Our JAR can be found at @target/sample-1.0-SNAPSHOT.jar@.

h2. Quick Reference

h3. Common Commands

* clean - clear the @target/@ directory
* compile - compiles source
* test - runs tests
* package - creates a publishable jar file
* install - install the package into the local repository, for use as a dependency in other projects locally

There are many more commands, each plugin typically defines its own commands too.
Multiple commands can be run at once: @mvn clean package@
